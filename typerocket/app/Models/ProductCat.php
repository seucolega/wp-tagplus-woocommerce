<?php

namespace App\Models;

use App\Tagplus\ProductCatSynchronize;
use TypeRocket\Exceptions\ModelException;
use TypeRocket\Models\WPTerm;

/**
 * @property string $from_id
 */
class ProductCat extends WPTerm implements Synchronize
{
    protected $taxonomy = 'product_cat';
    protected $fromId = null;
    protected $name = null;
    protected $location = null;
    protected $parentId = null;

    public function findBySlug($slug)
    {
        $model = (new self())
            ->where('slug', sanitize_title($slug))
            ->first();
        return $model;
    }

    /**
     * @param \App\Tagplus\ProductCat $fromItem From object
     *
     * @return ProductCat
     */
    public function findByFrom($fromItem)
    {
        $categoryWp = (new self)->findBySlug($fromItem->getSlug());
        if (!$categoryWp) {
            $categoryWp = (new self)->findByFromId($fromItem->getId());
        }
        return $categoryWp;
    }

    public function findByFromId($fromId)
    {
        $args = [
            'taxonomy' => $this->taxonomy,
            'hide_empty' => false,
            'fields' => 'ids',
            'meta_query' => [
                [
                    'key' => '_from_id',
                    'value' => $fromId,
                ],
            ],
        ];
        $terms = get_terms($args);

        if (isset($terms[0])) {
            return (new ProductCat())->findById($terms[0]);
        } else {
            return $this;
        }
    }

    /**
     * Get Id from ERP
     *
     * @return null
     */
    public function getFromId()
    {
        if (!$this->fromId) {
            $this->fromId = (string)$this->getFieldValue('_from_id');
        }
        return $this->fromId;
    }

    /**
     * Set Id from ERP
     *
     * @param integer $fromId Id
     *
     * @return $this
     */
    public function setFromId($fromId)
    {
        if (!$this->getFromId()) {
            $this->fromId = $fromId;
            $this->setProperty('_from_id', $fromId);
        }

        return $this;
    }

    /**
     * Get product name
     *
     * @return string
     */
    public function getName()
    {
        if (!$this->name) {
            $this->name = $this->getProperty('name');
        }
        return $this->name;
    }

    /**
     * Set product name
     *
     * @param string $name Name
     *
     * @return void
     */
    protected function setName($name): void
    {
        if ($this->getName() !== $name) {
            $this->name = $name;
            $this->setProperty('name', $name);
        }
    }

    /**
     * Get product name
     *
     * @return string
     */
    protected function getLocation()
    {
        if (!$this->location) {
            $this->location = (string)$this->getFieldValue('location');
        }
        return $this->location;
    }

    /**
     * Set product location
     *
     * @param string $location Location
     *
     * @return void
     */
    protected function setLocation($location): void
    {
        if ($this->getLocation() !== $location) {
            $this->location = $location;
            $this->setProperty('location', $location);
        }
    }

    // public function create($fields = [])
    // {
    //     if ($this->from_id && !(new self())->findByFromId($this->from_id)) {
    //         /* @var \App\Tagplus\ProductCat $fromItem */
    //         $fromItem = \App\Tagplus\ProductCat::fetchFirst($this->from_id);
    //         $fromItem->getParentId();
    //     }
    //     return parent::create($fields); // TODO: Change the autogenerated stub
    // }

    /**
     * Update a WordPress Product Category from TagPlus Product
     *
     * @param \App\Tagplus\ProductCat $fromItem ProductCat from TagPlus
     *
     * @return bool
     */
    public function updateFrom($fromItem)
    {
        if (!$this->getID()) {
            return false;
        }

        $this->setFromId($fromItem->getId());
        $this->setName($fromItem->getName());
        $this->setLocation($fromItem->getLocation());

        // $this->setFields($fromItem->getFields());

        if ($fromItem->getParentId()) {
            $parentWp = (new ProductCatSynchronize)
                ->synchronizeFrom($fromItem->getParentId());
            $this->setProperty('parent', $parentWp->getID());
        }

        try {
            $this->update();
            return true;
        } catch (ModelException $e) {
            return false;
        }
    }

    /**
     * Create a WordPress Product Category from TagPlus Product
     *
     * @param \App\Tagplus\ProductCat $fromItem ProductCat from TagPlus
     *
     * @return bool
     */
    public function createFrom($fromItem)
    {
        if ($this->getID()) {
            return false;
        }

        $this->setName($fromItem->getName());

        try {
            $this->create();
            $this->setFromId($fromItem->getId());
            $this->updateFrom($fromItem);
            // $this->update();
            return true;
        } catch (ModelException $e) {
            return false;
        }
    }
}
